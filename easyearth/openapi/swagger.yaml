openapi: 3.0.3
info:
  description: Basic image analysis app with Flask , Connexion and OpenApi 3
  version: 0.0.1
  title: EasyEarth API
  contact:
    email: ankit.ky@gmail.com, chengyan2017@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /:
    get:
      summary: Get the welcome message
      operationId: easyearth.controllers.welcome_controller.welcome
      responses:
        200:
          description: Welcome message
          content:
            text/html:
              schema:
                type: string
                example: "<h1>Welcome to EasyEarth API</h1>"
  /ping:
    get:
      summary: Check if the easyearth is alive
      operationId: easyearth.controllers.predict_controller.ping
      responses:
        200:
          description: Server is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server is alive"
  /predict:
    post:
      summary: Analyze an image with vision(-language) model
      operationId: easyearth.controllers.predict_controller.predict
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model_type:
                  type: string
                  description: Type of the model to use for analysis, which will call the corresponding predictor under the models directory.
                  example: "sam" # Or "segment" or sam2 #  TODO: add more model types such as "clip" and "local" etc.
                  nullable: false
                model_path:
                  type: string
                  description: Path to the hugging face model # TODO: support local path
                  example: "facebook/sam-vit-base"
                  nullable: false
                model_config:
                  type: object
                  description: Configuration for the model (optional)
                  example: { "patch_size": 16, "image_size": 1024, "num_channels": 3, "num_classes": 1 }
                  nullable: true
                image_path:
                  type: string
                  description: Path to the image
                  example: "/path/to/image.jpg"
                  nullable: false
                embedding_path:
                  type: string
                  description: Path to the embedding (optional)
                  example: "/path/to/embedding.pt"
                  nullable: true
                prompts:
                  type: array
                  description: List of prompts to guide the analysis (optional)
                  nullable: true
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [ "Point", "Box", "Text", "None" ]
                      data:
                        type: object
                        description: Prompt-specific data
                        nullable: true
                        example: { "points": [[100, 200]], "boxes": [[50, 50, 150, 150]], "text": "trees" } # pixel coordinates
                aoi:
                  type: object
                  description: Area of interest for the analysis (optional), for now only for non-prompt based models
                  nullable: true
                  properties:
                    type:
                      type: string
                      enum: [ "Polygon", "Rectangle" ]
                    coordinates:
                      type: array
                      minItems: 4
                      maxItems: 4
                      items:
                        type: number
                      description: Coordinates defining the area of interest
                      example: [0, 0, 1000, 1000] # top-left x, top-left y, bottom-right x, bottom-right y, pixel coordinates
              required:
                - image_path
                - model_type
                - model_path
      responses:
        "200":
          description: Analysis response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                      type: string
                      description: Status of the analysis
                      example: "success"
                  features:
                    type: array
                    description: List of features extracted from the image
                    items:
                      type: object
                      properties:
                        properties:
                          type: object
                          description: Properties of the feature
                          example: { "uid": 1}  # TODO: add more properties such as {"label": "tree", "confidence": 0.95 }
                        geometry:
                            type: object
                            description: Geometry of the feature
                            example: { "type": "Polygon", "coordinates": [[[50, 50], [150, 50], [150, 150], [50, 150], [50, 50]]] }
                  crs:
                    type: string
                    description: Coordinate reference system of the image
                    example: "EPSG:4326"
                  # TODO: add information for example about the model used
servers:
  - url: '/easyearth'
    description: Local easyearth
